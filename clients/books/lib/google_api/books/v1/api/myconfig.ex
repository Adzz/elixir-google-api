# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule GoogleApi.Books.V1.Api.Myconfig do
  @moduledoc """
  API calls for all endpoints tagged `Myconfig`.
  """

  alias GoogleApi.Books.V1.Connection
  import GoogleApi.Books.V1.RequestBuilder


  @doc """
  Gets the current settings for the user.

  ## Parameters

  - connection (GoogleApi.Books.V1.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String): Data format for the response.
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    - :user_ip (String): IP address of the site where the request originates. Use this if you want to enforce per-user limits.

  ## Returns

  {:ok, %GoogleApi.Books.V1.Model.Usersettings{}} on success
  {:error, info} on failure
  """
  @spec books_myconfig_get_user_settings(Tesla.Env.client, keyword()) :: {:ok, GoogleApi.Books.V1.Model.Usersettings.t} | {:error, Tesla.Env.t}
  def books_myconfig_get_user_settings(connection, opts \\ []) do
    optional_params = %{
      :"alt" => :query,
      :"fields" => :query,
      :"key" => :query,
      :"oauth_token" => :query,
      :"prettyPrint" => :query,
      :"quotaUser" => :query,
      :"userIp" => :query
    }
    %{}
    |> method(:get)
    |> url("/myconfig/getUserSettings")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.Books.V1.Model.Usersettings{})
  end

  @doc """
  Release downloaded content access restriction.

  ## Parameters

  - connection (GoogleApi.Books.V1.Connection): Connection to server
  - volume_ids (List[String]): The volume(s) to release restrictions for.
  - cpksver (String): The device/version ID from which to release the restriction.
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String): Data format for the response.
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    - :user_ip (String): IP address of the site where the request originates. Use this if you want to enforce per-user limits.
    - :locale (String): ISO-639-1, ISO-3166-1 codes for message localization, i.e. en_US.
    - :source (String): String to identify the originator of this request.

  ## Returns

  {:ok, %GoogleApi.Books.V1.Model.DownloadAccesses{}} on success
  {:error, info} on failure
  """
  @spec books_myconfig_release_download_access(Tesla.Env.client, list(String.t), String.t, keyword()) :: {:ok, GoogleApi.Books.V1.Model.DownloadAccesses.t} | {:error, Tesla.Env.t}
  def books_myconfig_release_download_access(connection, volume_ids, cpksver, opts \\ []) do
    optional_params = %{
      :"alt" => :query,
      :"fields" => :query,
      :"key" => :query,
      :"oauth_token" => :query,
      :"prettyPrint" => :query,
      :"quotaUser" => :query,
      :"userIp" => :query,
      :"locale" => :query,
      :"source" => :query
    }
    %{}
    |> method(:post)
    |> url("/myconfig/releaseDownloadAccess")
    |> add_param(:query, :"volumeIds", volume_ids)
    |> add_param(:query, :"cpksver", cpksver)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.Books.V1.Model.DownloadAccesses{})
  end

  @doc """
  Request concurrent and download access restrictions.

  ## Parameters

  - connection (GoogleApi.Books.V1.Connection): Connection to server
  - source (String): String to identify the originator of this request.
  - volume_id (String): The volume to request concurrent/download restrictions for.
  - nonce (String): The client nonce value.
  - cpksver (String): The device/version ID from which to request the restrictions.
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String): Data format for the response.
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    - :user_ip (String): IP address of the site where the request originates. Use this if you want to enforce per-user limits.
    - :license_types (String): The type of access license to request. If not specified, the default is BOTH.
    - :locale (String): ISO-639-1, ISO-3166-1 codes for message localization, i.e. en_US.

  ## Returns

  {:ok, %GoogleApi.Books.V1.Model.RequestAccess{}} on success
  {:error, info} on failure
  """
  @spec books_myconfig_request_access(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, GoogleApi.Books.V1.Model.RequestAccess.t} | {:error, Tesla.Env.t}
  def books_myconfig_request_access(connection, source, volume_id, nonce, cpksver, opts \\ []) do
    optional_params = %{
      :"alt" => :query,
      :"fields" => :query,
      :"key" => :query,
      :"oauth_token" => :query,
      :"prettyPrint" => :query,
      :"quotaUser" => :query,
      :"userIp" => :query,
      :"licenseTypes" => :query,
      :"locale" => :query
    }
    %{}
    |> method(:post)
    |> url("/myconfig/requestAccess")
    |> add_param(:query, :"source", source)
    |> add_param(:query, :"volumeId", volume_id)
    |> add_param(:query, :"nonce", nonce)
    |> add_param(:query, :"cpksver", cpksver)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.Books.V1.Model.RequestAccess{})
  end

  @doc """
  Request downloaded content access for specified volumes on the My eBooks shelf.

  ## Parameters

  - connection (GoogleApi.Books.V1.Connection): Connection to server
  - source (String): String to identify the originator of this request.
  - nonce (String): The client nonce value.
  - cpksver (String): The device/version ID from which to release the restriction.
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String): Data format for the response.
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    - :user_ip (String): IP address of the site where the request originates. Use this if you want to enforce per-user limits.
    - :features (List[String]): List of features supported by the client, i.e., &#39;RENTALS&#39;
    - :include_non_comics_series (Boolean): Set to true to include non-comics series. Defaults to false.
    - :locale (String): ISO-639-1, ISO-3166-1 codes for message localization, i.e. en_US.
    - :show_preorders (Boolean): Set to true to show pre-ordered books. Defaults to false.
    - :volume_ids (List[String]): The volume(s) to request download restrictions for.

  ## Returns

  {:ok, %GoogleApi.Books.V1.Model.Volumes{}} on success
  {:error, info} on failure
  """
  @spec books_myconfig_sync_volume_licenses(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, GoogleApi.Books.V1.Model.Volumes.t} | {:error, Tesla.Env.t}
  def books_myconfig_sync_volume_licenses(connection, source, nonce, cpksver, opts \\ []) do
    optional_params = %{
      :"alt" => :query,
      :"fields" => :query,
      :"key" => :query,
      :"oauth_token" => :query,
      :"prettyPrint" => :query,
      :"quotaUser" => :query,
      :"userIp" => :query,
      :"features" => :query,
      :"includeNonComicsSeries" => :query,
      :"locale" => :query,
      :"showPreorders" => :query,
      :"volumeIds" => :query
    }
    %{}
    |> method(:post)
    |> url("/myconfig/syncVolumeLicenses")
    |> add_param(:query, :"source", source)
    |> add_param(:query, :"nonce", nonce)
    |> add_param(:query, :"cpksver", cpksver)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.Books.V1.Model.Volumes{})
  end

  @doc """
  Sets the settings for the user. If a sub-object is specified, it will overwrite the existing sub-object stored in the server. Unspecified sub-objects will retain the existing value.

  ## Parameters

  - connection (GoogleApi.Books.V1.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String): Data format for the response.
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    - :user_ip (String): IP address of the site where the request originates. Use this if you want to enforce per-user limits.
    - :body (Usersettings): 

  ## Returns

  {:ok, %GoogleApi.Books.V1.Model.Usersettings{}} on success
  {:error, info} on failure
  """
  @spec books_myconfig_update_user_settings(Tesla.Env.client, keyword()) :: {:ok, GoogleApi.Books.V1.Model.Usersettings.t} | {:error, Tesla.Env.t}
  def books_myconfig_update_user_settings(connection, opts \\ []) do
    optional_params = %{
      :"alt" => :query,
      :"fields" => :query,
      :"key" => :query,
      :"oauth_token" => :query,
      :"prettyPrint" => :query,
      :"quotaUser" => :query,
      :"userIp" => :query,
      :"body" => :body
    }
    %{}
    |> method(:post)
    |> url("/myconfig/updateUserSettings")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.Books.V1.Model.Usersettings{})
  end
end
