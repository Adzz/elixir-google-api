# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule GoogleApi.IdentityToolkit.V3.Api.Relyingparty do
  @moduledoc """
  API calls for all endpoints tagged `Relyingparty`.
  """

  alias GoogleApi.IdentityToolkit.V3.Connection
  import GoogleApi.IdentityToolkit.V3.RequestBuilder


  @doc """
  Creates the URI used by the IdP to authenticate the user.

  ## Parameters

  - connection (GoogleApi.IdentityToolkit.V3.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String): Data format for the response.
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    - :user_ip (String): IP address of the site where the request originates. Use this if you want to enforce per-user limits.
    - :body (IdentitytoolkitRelyingpartyCreateAuthUriRequest): 

  ## Returns

  {:ok, %GoogleApi.IdentityToolkit.V3.Model.CreateAuthUriResponse{}} on success
  {:error, info} on failure
  """
  @spec identitytoolkit_relyingparty_create_auth_uri(Tesla.Env.client, keyword()) :: {:ok, GoogleApi.IdentityToolkit.V3.Model.CreateAuthUriResponse.t} | {:error, Tesla.Env.t}
  def identitytoolkit_relyingparty_create_auth_uri(connection, opts \\ []) do
    optional_params = %{
      :"alt" => :query,
      :"fields" => :query,
      :"key" => :query,
      :"oauth_token" => :query,
      :"prettyPrint" => :query,
      :"quotaUser" => :query,
      :"userIp" => :query,
      :"body" => :body
    }
    %{}
    |> method(:post)
    |> url("/createAuthUri")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.IdentityToolkit.V3.Model.CreateAuthUriResponse{})
  end

  @doc """
  Delete user account.

  ## Parameters

  - connection (GoogleApi.IdentityToolkit.V3.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String): Data format for the response.
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    - :user_ip (String): IP address of the site where the request originates. Use this if you want to enforce per-user limits.
    - :body (IdentitytoolkitRelyingpartyDeleteAccountRequest): 

  ## Returns

  {:ok, %GoogleApi.IdentityToolkit.V3.Model.DeleteAccountResponse{}} on success
  {:error, info} on failure
  """
  @spec identitytoolkit_relyingparty_delete_account(Tesla.Env.client, keyword()) :: {:ok, GoogleApi.IdentityToolkit.V3.Model.DeleteAccountResponse.t} | {:error, Tesla.Env.t}
  def identitytoolkit_relyingparty_delete_account(connection, opts \\ []) do
    optional_params = %{
      :"alt" => :query,
      :"fields" => :query,
      :"key" => :query,
      :"oauth_token" => :query,
      :"prettyPrint" => :query,
      :"quotaUser" => :query,
      :"userIp" => :query,
      :"body" => :body
    }
    %{}
    |> method(:post)
    |> url("/deleteAccount")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.IdentityToolkit.V3.Model.DeleteAccountResponse{})
  end

  @doc """
  Batch download user accounts.

  ## Parameters

  - connection (GoogleApi.IdentityToolkit.V3.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String): Data format for the response.
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    - :user_ip (String): IP address of the site where the request originates. Use this if you want to enforce per-user limits.
    - :body (IdentitytoolkitRelyingpartyDownloadAccountRequest): 

  ## Returns

  {:ok, %GoogleApi.IdentityToolkit.V3.Model.DownloadAccountResponse{}} on success
  {:error, info} on failure
  """
  @spec identitytoolkit_relyingparty_download_account(Tesla.Env.client, keyword()) :: {:ok, GoogleApi.IdentityToolkit.V3.Model.DownloadAccountResponse.t} | {:error, Tesla.Env.t}
  def identitytoolkit_relyingparty_download_account(connection, opts \\ []) do
    optional_params = %{
      :"alt" => :query,
      :"fields" => :query,
      :"key" => :query,
      :"oauth_token" => :query,
      :"prettyPrint" => :query,
      :"quotaUser" => :query,
      :"userIp" => :query,
      :"body" => :body
    }
    %{}
    |> method(:post)
    |> url("/downloadAccount")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.IdentityToolkit.V3.Model.DownloadAccountResponse{})
  end

  @doc """
  Returns the account info.

  ## Parameters

  - connection (GoogleApi.IdentityToolkit.V3.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String): Data format for the response.
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    - :user_ip (String): IP address of the site where the request originates. Use this if you want to enforce per-user limits.
    - :body (IdentitytoolkitRelyingpartyGetAccountInfoRequest): 

  ## Returns

  {:ok, %GoogleApi.IdentityToolkit.V3.Model.GetAccountInfoResponse{}} on success
  {:error, info} on failure
  """
  @spec identitytoolkit_relyingparty_get_account_info(Tesla.Env.client, keyword()) :: {:ok, GoogleApi.IdentityToolkit.V3.Model.GetAccountInfoResponse.t} | {:error, Tesla.Env.t}
  def identitytoolkit_relyingparty_get_account_info(connection, opts \\ []) do
    optional_params = %{
      :"alt" => :query,
      :"fields" => :query,
      :"key" => :query,
      :"oauth_token" => :query,
      :"prettyPrint" => :query,
      :"quotaUser" => :query,
      :"userIp" => :query,
      :"body" => :body
    }
    %{}
    |> method(:post)
    |> url("/getAccountInfo")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.IdentityToolkit.V3.Model.GetAccountInfoResponse{})
  end

  @doc """
  Get a code for user action confirmation.

  ## Parameters

  - connection (GoogleApi.IdentityToolkit.V3.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String): Data format for the response.
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    - :user_ip (String): IP address of the site where the request originates. Use this if you want to enforce per-user limits.
    - :body (Relyingparty): 

  ## Returns

  {:ok, %GoogleApi.IdentityToolkit.V3.Model.GetOobConfirmationCodeResponse{}} on success
  {:error, info} on failure
  """
  @spec identitytoolkit_relyingparty_get_oob_confirmation_code(Tesla.Env.client, keyword()) :: {:ok, GoogleApi.IdentityToolkit.V3.Model.GetOobConfirmationCodeResponse.t} | {:error, Tesla.Env.t}
  def identitytoolkit_relyingparty_get_oob_confirmation_code(connection, opts \\ []) do
    optional_params = %{
      :"alt" => :query,
      :"fields" => :query,
      :"key" => :query,
      :"oauth_token" => :query,
      :"prettyPrint" => :query,
      :"quotaUser" => :query,
      :"userIp" => :query,
      :"body" => :body
    }
    %{}
    |> method(:post)
    |> url("/getOobConfirmationCode")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.IdentityToolkit.V3.Model.GetOobConfirmationCodeResponse{})
  end

  @doc """
  Get project configuration.

  ## Parameters

  - connection (GoogleApi.IdentityToolkit.V3.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String): Data format for the response.
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    - :user_ip (String): IP address of the site where the request originates. Use this if you want to enforce per-user limits.
    - :delegated_project_number (String): Delegated GCP project number of the request.
    - :project_number (String): GCP project number of the request.

  ## Returns

  {:ok, %GoogleApi.IdentityToolkit.V3.Model.IdentitytoolkitRelyingpartyGetProjectConfigResponse{}} on success
  {:error, info} on failure
  """
  @spec identitytoolkit_relyingparty_get_project_config(Tesla.Env.client, keyword()) :: {:ok, GoogleApi.IdentityToolkit.V3.Model.IdentitytoolkitRelyingpartyGetProjectConfigResponse.t} | {:error, Tesla.Env.t}
  def identitytoolkit_relyingparty_get_project_config(connection, opts \\ []) do
    optional_params = %{
      :"alt" => :query,
      :"fields" => :query,
      :"key" => :query,
      :"oauth_token" => :query,
      :"prettyPrint" => :query,
      :"quotaUser" => :query,
      :"userIp" => :query,
      :"delegatedProjectNumber" => :query,
      :"projectNumber" => :query
    }
    %{}
    |> method(:get)
    |> url("/getProjectConfig")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.IdentityToolkit.V3.Model.IdentitytoolkitRelyingpartyGetProjectConfigResponse{})
  end

  @doc """
  Get token signing public key.

  ## Parameters

  - connection (GoogleApi.IdentityToolkit.V3.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String): Data format for the response.
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    - :user_ip (String): IP address of the site where the request originates. Use this if you want to enforce per-user limits.

  ## Returns

  {:ok, %GoogleApi.IdentityToolkit.V3.Model.IdentitytoolkitRelyingpartyGetPublicKeysResponse{}} on success
  {:error, info} on failure
  """
  @spec identitytoolkit_relyingparty_get_public_keys(Tesla.Env.client, keyword()) :: {:ok, GoogleApi.IdentityToolkit.V3.Model.IdentitytoolkitRelyingpartyGetPublicKeysResponse.t} | {:error, Tesla.Env.t}
  def identitytoolkit_relyingparty_get_public_keys(connection, opts \\ []) do
    optional_params = %{
      :"alt" => :query,
      :"fields" => :query,
      :"key" => :query,
      :"oauth_token" => :query,
      :"prettyPrint" => :query,
      :"quotaUser" => :query,
      :"userIp" => :query
    }
    %{}
    |> method(:get)
    |> url("/publicKeys")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.IdentityToolkit.V3.Model.IdentitytoolkitRelyingpartyGetPublicKeysResponse{})
  end

  @doc """
  Get recaptcha secure param.

  ## Parameters

  - connection (GoogleApi.IdentityToolkit.V3.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String): Data format for the response.
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    - :user_ip (String): IP address of the site where the request originates. Use this if you want to enforce per-user limits.

  ## Returns

  {:ok, %GoogleApi.IdentityToolkit.V3.Model.GetRecaptchaParamResponse{}} on success
  {:error, info} on failure
  """
  @spec identitytoolkit_relyingparty_get_recaptcha_param(Tesla.Env.client, keyword()) :: {:ok, GoogleApi.IdentityToolkit.V3.Model.GetRecaptchaParamResponse.t} | {:error, Tesla.Env.t}
  def identitytoolkit_relyingparty_get_recaptcha_param(connection, opts \\ []) do
    optional_params = %{
      :"alt" => :query,
      :"fields" => :query,
      :"key" => :query,
      :"oauth_token" => :query,
      :"prettyPrint" => :query,
      :"quotaUser" => :query,
      :"userIp" => :query
    }
    %{}
    |> method(:get)
    |> url("/getRecaptchaParam")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.IdentityToolkit.V3.Model.GetRecaptchaParamResponse{})
  end

  @doc """
  Reset password for a user.

  ## Parameters

  - connection (GoogleApi.IdentityToolkit.V3.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String): Data format for the response.
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    - :user_ip (String): IP address of the site where the request originates. Use this if you want to enforce per-user limits.
    - :body (IdentitytoolkitRelyingpartyResetPasswordRequest): 

  ## Returns

  {:ok, %GoogleApi.IdentityToolkit.V3.Model.ResetPasswordResponse{}} on success
  {:error, info} on failure
  """
  @spec identitytoolkit_relyingparty_reset_password(Tesla.Env.client, keyword()) :: {:ok, GoogleApi.IdentityToolkit.V3.Model.ResetPasswordResponse.t} | {:error, Tesla.Env.t}
  def identitytoolkit_relyingparty_reset_password(connection, opts \\ []) do
    optional_params = %{
      :"alt" => :query,
      :"fields" => :query,
      :"key" => :query,
      :"oauth_token" => :query,
      :"prettyPrint" => :query,
      :"quotaUser" => :query,
      :"userIp" => :query,
      :"body" => :body
    }
    %{}
    |> method(:post)
    |> url("/resetPassword")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.IdentityToolkit.V3.Model.ResetPasswordResponse{})
  end

  @doc """
  Send SMS verification code.

  ## Parameters

  - connection (GoogleApi.IdentityToolkit.V3.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String): Data format for the response.
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    - :user_ip (String): IP address of the site where the request originates. Use this if you want to enforce per-user limits.
    - :body (IdentitytoolkitRelyingpartySendVerificationCodeRequest): 

  ## Returns

  {:ok, %GoogleApi.IdentityToolkit.V3.Model.IdentitytoolkitRelyingpartySendVerificationCodeResponse{}} on success
  {:error, info} on failure
  """
  @spec identitytoolkit_relyingparty_send_verification_code(Tesla.Env.client, keyword()) :: {:ok, GoogleApi.IdentityToolkit.V3.Model.IdentitytoolkitRelyingpartySendVerificationCodeResponse.t} | {:error, Tesla.Env.t}
  def identitytoolkit_relyingparty_send_verification_code(connection, opts \\ []) do
    optional_params = %{
      :"alt" => :query,
      :"fields" => :query,
      :"key" => :query,
      :"oauth_token" => :query,
      :"prettyPrint" => :query,
      :"quotaUser" => :query,
      :"userIp" => :query,
      :"body" => :body
    }
    %{}
    |> method(:post)
    |> url("/sendVerificationCode")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.IdentityToolkit.V3.Model.IdentitytoolkitRelyingpartySendVerificationCodeResponse{})
  end

  @doc """
  Set account info for a user.

  ## Parameters

  - connection (GoogleApi.IdentityToolkit.V3.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String): Data format for the response.
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    - :user_ip (String): IP address of the site where the request originates. Use this if you want to enforce per-user limits.
    - :body (IdentitytoolkitRelyingpartySetAccountInfoRequest): 

  ## Returns

  {:ok, %GoogleApi.IdentityToolkit.V3.Model.SetAccountInfoResponse{}} on success
  {:error, info} on failure
  """
  @spec identitytoolkit_relyingparty_set_account_info(Tesla.Env.client, keyword()) :: {:ok, GoogleApi.IdentityToolkit.V3.Model.SetAccountInfoResponse.t} | {:error, Tesla.Env.t}
  def identitytoolkit_relyingparty_set_account_info(connection, opts \\ []) do
    optional_params = %{
      :"alt" => :query,
      :"fields" => :query,
      :"key" => :query,
      :"oauth_token" => :query,
      :"prettyPrint" => :query,
      :"quotaUser" => :query,
      :"userIp" => :query,
      :"body" => :body
    }
    %{}
    |> method(:post)
    |> url("/setAccountInfo")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.IdentityToolkit.V3.Model.SetAccountInfoResponse{})
  end

  @doc """
  Set project configuration.

  ## Parameters

  - connection (GoogleApi.IdentityToolkit.V3.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String): Data format for the response.
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    - :user_ip (String): IP address of the site where the request originates. Use this if you want to enforce per-user limits.
    - :body (IdentitytoolkitRelyingpartySetProjectConfigRequest): 

  ## Returns

  {:ok, %GoogleApi.IdentityToolkit.V3.Model.IdentitytoolkitRelyingpartySetProjectConfigResponse{}} on success
  {:error, info} on failure
  """
  @spec identitytoolkit_relyingparty_set_project_config(Tesla.Env.client, keyword()) :: {:ok, GoogleApi.IdentityToolkit.V3.Model.IdentitytoolkitRelyingpartySetProjectConfigResponse.t} | {:error, Tesla.Env.t}
  def identitytoolkit_relyingparty_set_project_config(connection, opts \\ []) do
    optional_params = %{
      :"alt" => :query,
      :"fields" => :query,
      :"key" => :query,
      :"oauth_token" => :query,
      :"prettyPrint" => :query,
      :"quotaUser" => :query,
      :"userIp" => :query,
      :"body" => :body
    }
    %{}
    |> method(:post)
    |> url("/setProjectConfig")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.IdentityToolkit.V3.Model.IdentitytoolkitRelyingpartySetProjectConfigResponse{})
  end

  @doc """
  Sign out user.

  ## Parameters

  - connection (GoogleApi.IdentityToolkit.V3.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String): Data format for the response.
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    - :user_ip (String): IP address of the site where the request originates. Use this if you want to enforce per-user limits.
    - :body (IdentitytoolkitRelyingpartySignOutUserRequest): 

  ## Returns

  {:ok, %GoogleApi.IdentityToolkit.V3.Model.IdentitytoolkitRelyingpartySignOutUserResponse{}} on success
  {:error, info} on failure
  """
  @spec identitytoolkit_relyingparty_sign_out_user(Tesla.Env.client, keyword()) :: {:ok, GoogleApi.IdentityToolkit.V3.Model.IdentitytoolkitRelyingpartySignOutUserResponse.t} | {:error, Tesla.Env.t}
  def identitytoolkit_relyingparty_sign_out_user(connection, opts \\ []) do
    optional_params = %{
      :"alt" => :query,
      :"fields" => :query,
      :"key" => :query,
      :"oauth_token" => :query,
      :"prettyPrint" => :query,
      :"quotaUser" => :query,
      :"userIp" => :query,
      :"body" => :body
    }
    %{}
    |> method(:post)
    |> url("/signOutUser")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.IdentityToolkit.V3.Model.IdentitytoolkitRelyingpartySignOutUserResponse{})
  end

  @doc """
  Signup new user.

  ## Parameters

  - connection (GoogleApi.IdentityToolkit.V3.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String): Data format for the response.
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    - :user_ip (String): IP address of the site where the request originates. Use this if you want to enforce per-user limits.
    - :body (IdentitytoolkitRelyingpartySignupNewUserRequest): 

  ## Returns

  {:ok, %GoogleApi.IdentityToolkit.V3.Model.SignupNewUserResponse{}} on success
  {:error, info} on failure
  """
  @spec identitytoolkit_relyingparty_signup_new_user(Tesla.Env.client, keyword()) :: {:ok, GoogleApi.IdentityToolkit.V3.Model.SignupNewUserResponse.t} | {:error, Tesla.Env.t}
  def identitytoolkit_relyingparty_signup_new_user(connection, opts \\ []) do
    optional_params = %{
      :"alt" => :query,
      :"fields" => :query,
      :"key" => :query,
      :"oauth_token" => :query,
      :"prettyPrint" => :query,
      :"quotaUser" => :query,
      :"userIp" => :query,
      :"body" => :body
    }
    %{}
    |> method(:post)
    |> url("/signupNewUser")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.IdentityToolkit.V3.Model.SignupNewUserResponse{})
  end

  @doc """
  Batch upload existing user accounts.

  ## Parameters

  - connection (GoogleApi.IdentityToolkit.V3.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String): Data format for the response.
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    - :user_ip (String): IP address of the site where the request originates. Use this if you want to enforce per-user limits.
    - :body (IdentitytoolkitRelyingpartyUploadAccountRequest): 

  ## Returns

  {:ok, %GoogleApi.IdentityToolkit.V3.Model.UploadAccountResponse{}} on success
  {:error, info} on failure
  """
  @spec identitytoolkit_relyingparty_upload_account(Tesla.Env.client, keyword()) :: {:ok, GoogleApi.IdentityToolkit.V3.Model.UploadAccountResponse.t} | {:error, Tesla.Env.t}
  def identitytoolkit_relyingparty_upload_account(connection, opts \\ []) do
    optional_params = %{
      :"alt" => :query,
      :"fields" => :query,
      :"key" => :query,
      :"oauth_token" => :query,
      :"prettyPrint" => :query,
      :"quotaUser" => :query,
      :"userIp" => :query,
      :"body" => :body
    }
    %{}
    |> method(:post)
    |> url("/uploadAccount")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.IdentityToolkit.V3.Model.UploadAccountResponse{})
  end

  @doc """
  Verifies the assertion returned by the IdP.

  ## Parameters

  - connection (GoogleApi.IdentityToolkit.V3.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String): Data format for the response.
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    - :user_ip (String): IP address of the site where the request originates. Use this if you want to enforce per-user limits.
    - :body (IdentitytoolkitRelyingpartyVerifyAssertionRequest): 

  ## Returns

  {:ok, %GoogleApi.IdentityToolkit.V3.Model.VerifyAssertionResponse{}} on success
  {:error, info} on failure
  """
  @spec identitytoolkit_relyingparty_verify_assertion(Tesla.Env.client, keyword()) :: {:ok, GoogleApi.IdentityToolkit.V3.Model.VerifyAssertionResponse.t} | {:error, Tesla.Env.t}
  def identitytoolkit_relyingparty_verify_assertion(connection, opts \\ []) do
    optional_params = %{
      :"alt" => :query,
      :"fields" => :query,
      :"key" => :query,
      :"oauth_token" => :query,
      :"prettyPrint" => :query,
      :"quotaUser" => :query,
      :"userIp" => :query,
      :"body" => :body
    }
    %{}
    |> method(:post)
    |> url("/verifyAssertion")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.IdentityToolkit.V3.Model.VerifyAssertionResponse{})
  end

  @doc """
  Verifies the developer asserted ID token.

  ## Parameters

  - connection (GoogleApi.IdentityToolkit.V3.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String): Data format for the response.
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    - :user_ip (String): IP address of the site where the request originates. Use this if you want to enforce per-user limits.
    - :body (IdentitytoolkitRelyingpartyVerifyCustomTokenRequest): 

  ## Returns

  {:ok, %GoogleApi.IdentityToolkit.V3.Model.VerifyCustomTokenResponse{}} on success
  {:error, info} on failure
  """
  @spec identitytoolkit_relyingparty_verify_custom_token(Tesla.Env.client, keyword()) :: {:ok, GoogleApi.IdentityToolkit.V3.Model.VerifyCustomTokenResponse.t} | {:error, Tesla.Env.t}
  def identitytoolkit_relyingparty_verify_custom_token(connection, opts \\ []) do
    optional_params = %{
      :"alt" => :query,
      :"fields" => :query,
      :"key" => :query,
      :"oauth_token" => :query,
      :"prettyPrint" => :query,
      :"quotaUser" => :query,
      :"userIp" => :query,
      :"body" => :body
    }
    %{}
    |> method(:post)
    |> url("/verifyCustomToken")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.IdentityToolkit.V3.Model.VerifyCustomTokenResponse{})
  end

  @doc """
  Verifies the user entered password.

  ## Parameters

  - connection (GoogleApi.IdentityToolkit.V3.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String): Data format for the response.
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    - :user_ip (String): IP address of the site where the request originates. Use this if you want to enforce per-user limits.
    - :body (IdentitytoolkitRelyingpartyVerifyPasswordRequest): 

  ## Returns

  {:ok, %GoogleApi.IdentityToolkit.V3.Model.VerifyPasswordResponse{}} on success
  {:error, info} on failure
  """
  @spec identitytoolkit_relyingparty_verify_password(Tesla.Env.client, keyword()) :: {:ok, GoogleApi.IdentityToolkit.V3.Model.VerifyPasswordResponse.t} | {:error, Tesla.Env.t}
  def identitytoolkit_relyingparty_verify_password(connection, opts \\ []) do
    optional_params = %{
      :"alt" => :query,
      :"fields" => :query,
      :"key" => :query,
      :"oauth_token" => :query,
      :"prettyPrint" => :query,
      :"quotaUser" => :query,
      :"userIp" => :query,
      :"body" => :body
    }
    %{}
    |> method(:post)
    |> url("/verifyPassword")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.IdentityToolkit.V3.Model.VerifyPasswordResponse{})
  end

  @doc """
  Verifies ownership of a phone number and creates/updates the user account accordingly.

  ## Parameters

  - connection (GoogleApi.IdentityToolkit.V3.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String): Data format for the response.
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    - :user_ip (String): IP address of the site where the request originates. Use this if you want to enforce per-user limits.
    - :body (IdentitytoolkitRelyingpartyVerifyPhoneNumberRequest): 

  ## Returns

  {:ok, %GoogleApi.IdentityToolkit.V3.Model.IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse{}} on success
  {:error, info} on failure
  """
  @spec identitytoolkit_relyingparty_verify_phone_number(Tesla.Env.client, keyword()) :: {:ok, GoogleApi.IdentityToolkit.V3.Model.IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse.t} | {:error, Tesla.Env.t}
  def identitytoolkit_relyingparty_verify_phone_number(connection, opts \\ []) do
    optional_params = %{
      :"alt" => :query,
      :"fields" => :query,
      :"key" => :query,
      :"oauth_token" => :query,
      :"prettyPrint" => :query,
      :"quotaUser" => :query,
      :"userIp" => :query,
      :"body" => :body
    }
    %{}
    |> method(:post)
    |> url("/verifyPhoneNumber")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.IdentityToolkit.V3.Model.IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse{})
  end
end
