# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule GoogleApi.ReportCard.V1.Api.Mutes do
  @moduledoc """
  API calls for all endpoints tagged `Mutes`.
  """

  alias GoogleApi.ReportCard.V1.Connection
  import GoogleApi.ReportCard.V1.RequestBuilder


  @doc """
  Deletes a Mute.

  ## Parameters

  - connection (GoogleApi.ReportCard.V1.Connection): Connection to server
  - mutes_id (String): The Mute id.
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String): Data format for the response.
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    - :user_ip (String): IP address of the site where the request originates. Use this if you want to enforce per-user limits.

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec reportcard_mutes_delete(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def reportcard_mutes_delete(connection, mutes_id, opts \\ []) do
    optional_params = %{
      :"alt" => :query,
      :"fields" => :query,
      :"key" => :query,
      :"oauth_token" => :query,
      :"prettyPrint" => :query,
      :"quotaUser" => :query,
      :"userIp" => :query
    }
    %{}
    |> method(:delete)
    |> url("/mutes/#{mutes_id}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Gets a Mute by id.

  ## Parameters

  - connection (GoogleApi.ReportCard.V1.Connection): Connection to server
  - mutes_id (String): The Mute id.
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String): Data format for the response.
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    - :user_ip (String): IP address of the site where the request originates. Use this if you want to enforce per-user limits.

  ## Returns

  {:ok, %GoogleApi.ReportCard.V1.Model.Mute{}} on success
  {:error, info} on failure
  """
  @spec reportcard_mutes_get(Tesla.Env.client, String.t, keyword()) :: {:ok, GoogleApi.ReportCard.V1.Model.Mute.t} | {:error, Tesla.Env.t}
  def reportcard_mutes_get(connection, mutes_id, opts \\ []) do
    optional_params = %{
      :"alt" => :query,
      :"fields" => :query,
      :"key" => :query,
      :"oauth_token" => :query,
      :"prettyPrint" => :query,
      :"quotaUser" => :query,
      :"userIp" => :query
    }
    %{}
    |> method(:get)
    |> url("/mutes/#{mutes_id}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.ReportCard.V1.Model.Mute{})
  end

  @doc """
  Inserts a new Mute.

  ## Parameters

  - connection (GoogleApi.ReportCard.V1.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String): Data format for the response.
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    - :user_ip (String): IP address of the site where the request originates. Use this if you want to enforce per-user limits.
    - :body (Mute): 

  ## Returns

  {:ok, %GoogleApi.ReportCard.V1.Model.Mute{}} on success
  {:error, info} on failure
  """
  @spec reportcard_mutes_insert(Tesla.Env.client, keyword()) :: {:ok, GoogleApi.ReportCard.V1.Model.Mute.t} | {:error, Tesla.Env.t}
  def reportcard_mutes_insert(connection, opts \\ []) do
    optional_params = %{
      :"alt" => :query,
      :"fields" => :query,
      :"key" => :query,
      :"oauth_token" => :query,
      :"prettyPrint" => :query,
      :"quotaUser" => :query,
      :"userIp" => :query,
      :"body" => :body
    }
    %{}
    |> method(:post)
    |> url("/mutes")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.ReportCard.V1.Model.Mute{})
  end

  @doc """
  Returns a list of Mutes, maybe filtering by &#39;consumer&#39; or &#39;groupKey&#39;, &#39;sourceKey&#39; and &#39;supplier&#39;.

  ## Parameters

  - connection (GoogleApi.ReportCard.V1.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String): Data format for the response.
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    - :user_ip (String): IP address of the site where the request originates. Use this if you want to enforce per-user limits.
    - :consumer (String): Only return Mutes for this consumer
    - :group_key (String): Only return Mutes created with this group_key. Supplier and source_key must also be set.
    - :source_key (String): Only return Mutes created with this source_key. Supplier must also be set.
    - :supplier (String): Only return Mutes created by this supplier.

  ## Returns

  {:ok, %GoogleApi.ReportCard.V1.Model.MutesListResponse{}} on success
  {:error, info} on failure
  """
  @spec reportcard_mutes_list(Tesla.Env.client, keyword()) :: {:ok, GoogleApi.ReportCard.V1.Model.MutesListResponse.t} | {:error, Tesla.Env.t}
  def reportcard_mutes_list(connection, opts \\ []) do
    optional_params = %{
      :"alt" => :query,
      :"fields" => :query,
      :"key" => :query,
      :"oauth_token" => :query,
      :"prettyPrint" => :query,
      :"quotaUser" => :query,
      :"userIp" => :query,
      :"consumer" => :query,
      :"groupKey" => :query,
      :"sourceKey" => :query,
      :"supplier" => :query
    }
    %{}
    |> method(:get)
    |> url("/mutes")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.ReportCard.V1.Model.MutesListResponse{})
  end

  @doc """
  Updates an existing Mute. This method supports patch semantics.

  ## Parameters

  - connection (GoogleApi.ReportCard.V1.Connection): Connection to server
  - mutes_id (String): The Mute id.
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String): Data format for the response.
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    - :user_ip (String): IP address of the site where the request originates. Use this if you want to enforce per-user limits.
    - :body (Mute): 

  ## Returns

  {:ok, %GoogleApi.ReportCard.V1.Model.Mute{}} on success
  {:error, info} on failure
  """
  @spec reportcard_mutes_patch(Tesla.Env.client, String.t, keyword()) :: {:ok, GoogleApi.ReportCard.V1.Model.Mute.t} | {:error, Tesla.Env.t}
  def reportcard_mutes_patch(connection, mutes_id, opts \\ []) do
    optional_params = %{
      :"alt" => :query,
      :"fields" => :query,
      :"key" => :query,
      :"oauth_token" => :query,
      :"prettyPrint" => :query,
      :"quotaUser" => :query,
      :"userIp" => :query,
      :"body" => :body
    }
    %{}
    |> method(:patch)
    |> url("/mutes/#{mutes_id}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.ReportCard.V1.Model.Mute{})
  end

  @doc """
  Updates an existing Mute.

  ## Parameters

  - connection (GoogleApi.ReportCard.V1.Connection): Connection to server
  - mutes_id (String): The Mute id.
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String): Data format for the response.
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    - :user_ip (String): IP address of the site where the request originates. Use this if you want to enforce per-user limits.
    - :body (Mute): 

  ## Returns

  {:ok, %GoogleApi.ReportCard.V1.Model.Mute{}} on success
  {:error, info} on failure
  """
  @spec reportcard_mutes_update(Tesla.Env.client, String.t, keyword()) :: {:ok, GoogleApi.ReportCard.V1.Model.Mute.t} | {:error, Tesla.Env.t}
  def reportcard_mutes_update(connection, mutes_id, opts \\ []) do
    optional_params = %{
      :"alt" => :query,
      :"fields" => :query,
      :"key" => :query,
      :"oauth_token" => :query,
      :"prettyPrint" => :query,
      :"quotaUser" => :query,
      :"userIp" => :query,
      :"body" => :body
    }
    %{}
    |> method(:put)
    |> url("/mutes/#{mutes_id}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.ReportCard.V1.Model.Mute{})
  end
end
