# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule GoogleApi.FitnessInternal.V0DOGFOOD.Api.Users do
  @moduledoc """
  API calls for all endpoints tagged `Users`.
  """

  alias GoogleApi.FitnessInternal.V0DOGFOOD.Connection
  import GoogleApi.FitnessInternal.V0DOGFOOD.RequestBuilder


  @doc """
  Deletes a capsule

  ## Parameters

  - connection (GoogleApi.FitnessInternal.V0DOGFOOD.Connection): Connection to server
  - user_id (String): 
  - capsule_id (String): @required
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String): Data format for the response.
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    - :user_ip (String): IP address of the site where the request originates. Use this if you want to enforce per-user limits.
    - :header/accept_language (String): The accept-language field from the header of incoming requests.
    - :header/user_agent (String): 

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec fitness_internal_users_capsules_delete(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def fitness_internal_users_capsules_delete(connection, user_id, capsule_id, opts \\ []) do
    optional_params = %{
      :"alt" => :query,
      :"fields" => :query,
      :"key" => :query,
      :"oauth_token" => :query,
      :"prettyPrint" => :query,
      :"quotaUser" => :query,
      :"userIp" => :query,
      :"header.acceptLanguage" => :query,
      :"header.userAgent" => :query
    }
    %{}
    |> method(:delete)
    |> url("/users/#{user_id}/capsules/#{capsule_id}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Gets the list of web dashboard capsules.

  ## Parameters

  - connection (GoogleApi.FitnessInternal.V0DOGFOOD.Connection): Connection to server
  - user_id (String): 
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String): Data format for the response.
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    - :user_ip (String): IP address of the site where the request originates. Use this if you want to enforce per-user limits.
    - :header/accept_language (String): The accept-language field from the header of incoming requests.
    - :header/user_agent (String): 
    - :should_initialize (Boolean): If there are no capsules, they will be initialized to all available capsules.

  ## Returns

  {:ok, %GoogleApi.FitnessInternal.V0DOGFOOD.Model.ListCapsulesResponse{}} on success
  {:error, info} on failure
  """
  @spec fitness_internal_users_capsules_list(Tesla.Env.client, String.t, keyword()) :: {:ok, GoogleApi.FitnessInternal.V0DOGFOOD.Model.ListCapsulesResponse.t} | {:error, Tesla.Env.t}
  def fitness_internal_users_capsules_list(connection, user_id, opts \\ []) do
    optional_params = %{
      :"alt" => :query,
      :"fields" => :query,
      :"key" => :query,
      :"oauth_token" => :query,
      :"prettyPrint" => :query,
      :"quotaUser" => :query,
      :"userIp" => :query,
      :"header.acceptLanguage" => :query,
      :"header.userAgent" => :query,
      :"shouldInitialize" => :query
    }
    %{}
    |> method(:get)
    |> url("/users/#{user_id}/capsules")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.FitnessInternal.V0DOGFOOD.Model.ListCapsulesResponse{})
  end

  @doc """
  Updates a capsule

  ## Parameters

  - connection (GoogleApi.FitnessInternal.V0DOGFOOD.Connection): Connection to server
  - user_id (String): 
  - capsule_id (String): @required
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String): Data format for the response.
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    - :user_ip (String): IP address of the site where the request originates. Use this if you want to enforce per-user limits.
    - :header/accept_language (String): The accept-language field from the header of incoming requests.
    - :header/user_agent (String): 
    - :body (Capsule): 

  ## Returns

  {:ok, %GoogleApi.FitnessInternal.V0DOGFOOD.Model.Capsule{}} on success
  {:error, info} on failure
  """
  @spec fitness_internal_users_capsules_update(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, GoogleApi.FitnessInternal.V0DOGFOOD.Model.Capsule.t} | {:error, Tesla.Env.t}
  def fitness_internal_users_capsules_update(connection, user_id, capsule_id, opts \\ []) do
    optional_params = %{
      :"alt" => :query,
      :"fields" => :query,
      :"key" => :query,
      :"oauth_token" => :query,
      :"prettyPrint" => :query,
      :"quotaUser" => :query,
      :"userIp" => :query,
      :"header.acceptLanguage" => :query,
      :"header.userAgent" => :query,
      :"body" => :body
    }
    %{}
    |> method(:put)
    |> url("/users/#{user_id}/capsules/#{capsule_id}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.FitnessInternal.V0DOGFOOD.Model.Capsule{})
  end

  @doc """
  Validate checksums

  ## Parameters

  - connection (GoogleApi.FitnessInternal.V0DOGFOOD.Connection): Connection to server
  - user_id (String): 
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String): Data format for the response.
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    - :user_ip (String): IP address of the site where the request originates. Use this if you want to enforce per-user limits.
    - :body (ValidateChecksumRequest): 

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec fitness_internal_users_checksum(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def fitness_internal_users_checksum(connection, user_id, opts \\ []) do
    optional_params = %{
      :"alt" => :query,
      :"fields" => :query,
      :"key" => :query,
      :"oauth_token" => :query,
      :"prettyPrint" => :query,
      :"quotaUser" => :query,
      :"userIp" => :query,
      :"body" => :body
    }
    %{}
    |> method(:post)
    |> url("/users/#{user_id}/checksum")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """

  ## Parameters

  - connection (GoogleApi.FitnessInternal.V0DOGFOOD.Connection): Connection to server
  - user_id (String): 
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String): Data format for the response.
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    - :user_ip (String): IP address of the site where the request originates. Use this if you want to enforce per-user limits.
    - :experiment_flag_name (List[String]): 
    - :header/accept_language (String): The accept-language field from the header of incoming requests.
    - :header/user_agent (String): 

  ## Returns

  {:ok, %GoogleApi.FitnessInternal.V0DOGFOOD.Model.GetExperimentsResponse{}} on success
  {:error, info} on failure
  """
  @spec fitness_internal_users_get_mobile_experiments(Tesla.Env.client, String.t, keyword()) :: {:ok, GoogleApi.FitnessInternal.V0DOGFOOD.Model.GetExperimentsResponse.t} | {:error, Tesla.Env.t}
  def fitness_internal_users_get_mobile_experiments(connection, user_id, opts \\ []) do
    optional_params = %{
      :"alt" => :query,
      :"fields" => :query,
      :"key" => :query,
      :"oauth_token" => :query,
      :"prettyPrint" => :query,
      :"quotaUser" => :query,
      :"userIp" => :query,
      :"experimentFlagName" => :query,
      :"header.acceptLanguage" => :query,
      :"header.userAgent" => :query
    }
    %{}
    |> method(:get)
    |> url("/users/#{user_id}/mobileExperiments")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.FitnessInternal.V0DOGFOOD.Model.GetExperimentsResponse{})
  end

  @doc """

  ## Parameters

  - connection (GoogleApi.FitnessInternal.V0DOGFOOD.Connection): Connection to server
  - user_id (String): 
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String): Data format for the response.
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    - :user_ip (String): IP address of the site where the request originates. Use this if you want to enforce per-user limits.
    - :header/accept_language (String): The accept-language field from the header of incoming requests.
    - :header/user_agent (String): 

  ## Returns

  {:ok, %GoogleApi.FitnessInternal.V0DOGFOOD.Model.Profile{}} on success
  {:error, info} on failure
  """
  @spec fitness_internal_users_get_profile(Tesla.Env.client, String.t, keyword()) :: {:ok, GoogleApi.FitnessInternal.V0DOGFOOD.Model.Profile.t} | {:error, Tesla.Env.t}
  def fitness_internal_users_get_profile(connection, user_id, opts \\ []) do
    optional_params = %{
      :"alt" => :query,
      :"fields" => :query,
      :"key" => :query,
      :"oauth_token" => :query,
      :"prettyPrint" => :query,
      :"quotaUser" => :query,
      :"userIp" => :query,
      :"header.acceptLanguage" => :query,
      :"header.userAgent" => :query
    }
    %{}
    |> method(:get)
    |> url("/users/#{user_id}/profile")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.FitnessInternal.V0DOGFOOD.Model.Profile{})
  end

  @doc """

  ## Parameters

  - connection (GoogleApi.FitnessInternal.V0DOGFOOD.Connection): Connection to server
  - user_id (String): 
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String): Data format for the response.
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    - :user_ip (String): IP address of the site where the request originates. Use this if you want to enforce per-user limits.
    - :header/accept_language (String): The accept-language field from the header of incoming requests.
    - :header/user_agent (String): 
    - :body (Goal): 

  ## Returns

  {:ok, %GoogleApi.FitnessInternal.V0DOGFOOD.Model.Goal{}} on success
  {:error, info} on failure
  """
  @spec fitness_internal_users_goals_create(Tesla.Env.client, String.t, keyword()) :: {:ok, GoogleApi.FitnessInternal.V0DOGFOOD.Model.Goal.t} | {:error, Tesla.Env.t}
  def fitness_internal_users_goals_create(connection, user_id, opts \\ []) do
    optional_params = %{
      :"alt" => :query,
      :"fields" => :query,
      :"key" => :query,
      :"oauth_token" => :query,
      :"prettyPrint" => :query,
      :"quotaUser" => :query,
      :"userIp" => :query,
      :"header.acceptLanguage" => :query,
      :"header.userAgent" => :query,
      :"body" => :body
    }
    %{}
    |> method(:post)
    |> url("/users/#{user_id}/goals")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.FitnessInternal.V0DOGFOOD.Model.Goal{})
  end

  @doc """

  ## Parameters

  - connection (GoogleApi.FitnessInternal.V0DOGFOOD.Connection): Connection to server
  - user_id (String): 
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String): Data format for the response.
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    - :user_ip (String): IP address of the site where the request originates. Use this if you want to enforce per-user limits.
    - :changed_since_millis (String): 
    - :header/accept_language (String): The accept-language field from the header of incoming requests.
    - :header/user_agent (String): 
    - :include_cancelled (Boolean): 
    - :include_completed (Boolean): 

  ## Returns

  {:ok, %GoogleApi.FitnessInternal.V0DOGFOOD.Model.ListGoalsResponse{}} on success
  {:error, info} on failure
  """
  @spec fitness_internal_users_goals_list(Tesla.Env.client, String.t, keyword()) :: {:ok, GoogleApi.FitnessInternal.V0DOGFOOD.Model.ListGoalsResponse.t} | {:error, Tesla.Env.t}
  def fitness_internal_users_goals_list(connection, user_id, opts \\ []) do
    optional_params = %{
      :"alt" => :query,
      :"fields" => :query,
      :"key" => :query,
      :"oauth_token" => :query,
      :"prettyPrint" => :query,
      :"quotaUser" => :query,
      :"userIp" => :query,
      :"changedSinceMillis" => :query,
      :"header.acceptLanguage" => :query,
      :"header.userAgent" => :query,
      :"includeCancelled" => :query,
      :"includeCompleted" => :query
    }
    %{}
    |> method(:get)
    |> url("/users/#{user_id}/goals")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.FitnessInternal.V0DOGFOOD.Model.ListGoalsResponse{})
  end

  @doc """

  ## Parameters

  - connection (GoogleApi.FitnessInternal.V0DOGFOOD.Connection): Connection to server
  - user_id (String): 
  - goal_id (String): 
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String): Data format for the response.
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    - :user_ip (String): IP address of the site where the request originates. Use this if you want to enforce per-user limits.
    - :header/accept_language (String): The accept-language field from the header of incoming requests.
    - :header/user_agent (String): 
    - :body (Goal): 

  ## Returns

  {:ok, %GoogleApi.FitnessInternal.V0DOGFOOD.Model.Goal{}} on success
  {:error, info} on failure
  """
  @spec fitness_internal_users_goals_update(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, GoogleApi.FitnessInternal.V0DOGFOOD.Model.Goal.t} | {:error, Tesla.Env.t}
  def fitness_internal_users_goals_update(connection, user_id, goal_id, opts \\ []) do
    optional_params = %{
      :"alt" => :query,
      :"fields" => :query,
      :"key" => :query,
      :"oauth_token" => :query,
      :"prettyPrint" => :query,
      :"quotaUser" => :query,
      :"userIp" => :query,
      :"header.acceptLanguage" => :query,
      :"header.userAgent" => :query,
      :"body" => :body
    }
    %{}
    |> method(:put)
    |> url("/users/#{user_id}/goals/#{goal_id}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.FitnessInternal.V0DOGFOOD.Model.Goal{})
  end

  @doc """
  Create a goalv2

  ## Parameters

  - connection (GoogleApi.FitnessInternal.V0DOGFOOD.Connection): Connection to server
  - user_id (String): 
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String): Data format for the response.
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    - :user_ip (String): IP address of the site where the request originates. Use this if you want to enforce per-user limits.
    - :header/accept_language (String): The accept-language field from the header of incoming requests.
    - :header/user_agent (String): 
    - :body (GoalV2): 

  ## Returns

  {:ok, %GoogleApi.FitnessInternal.V0DOGFOOD.Model.GoalV2{}} on success
  {:error, info} on failure
  """
  @spec fitness_internal_users_goalsv2_create(Tesla.Env.client, String.t, keyword()) :: {:ok, GoogleApi.FitnessInternal.V0DOGFOOD.Model.GoalV2.t} | {:error, Tesla.Env.t}
  def fitness_internal_users_goalsv2_create(connection, user_id, opts \\ []) do
    optional_params = %{
      :"alt" => :query,
      :"fields" => :query,
      :"key" => :query,
      :"oauth_token" => :query,
      :"prettyPrint" => :query,
      :"quotaUser" => :query,
      :"userIp" => :query,
      :"header.acceptLanguage" => :query,
      :"header.userAgent" => :query,
      :"body" => :body
    }
    %{}
    |> method(:post)
    |> url("/users/#{user_id}/goalsv2")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.FitnessInternal.V0DOGFOOD.Model.GoalV2{})
  end

  @doc """
  Calls Glycogen to get a list of all active V2 goals.

  ## Parameters

  - connection (GoogleApi.FitnessInternal.V0DOGFOOD.Connection): Connection to server
  - user_id (String): 
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String): Data format for the response.
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    - :user_ip (String): IP address of the site where the request originates. Use this if you want to enforce per-user limits.
    - :header/accept_language (String): The accept-language field from the header of incoming requests.
    - :header/user_agent (String): 

  ## Returns

  {:ok, %GoogleApi.FitnessInternal.V0DOGFOOD.Model.ListGoalsV2Response{}} on success
  {:error, info} on failure
  """
  @spec fitness_internal_users_goalsv2_list(Tesla.Env.client, String.t, keyword()) :: {:ok, GoogleApi.FitnessInternal.V0DOGFOOD.Model.ListGoalsV2Response.t} | {:error, Tesla.Env.t}
  def fitness_internal_users_goalsv2_list(connection, user_id, opts \\ []) do
    optional_params = %{
      :"alt" => :query,
      :"fields" => :query,
      :"key" => :query,
      :"oauth_token" => :query,
      :"prettyPrint" => :query,
      :"quotaUser" => :query,
      :"userIp" => :query,
      :"header.acceptLanguage" => :query,
      :"header.userAgent" => :query
    }
    %{}
    |> method(:get)
    |> url("/users/#{user_id}/goalsv2")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.FitnessInternal.V0DOGFOOD.Model.ListGoalsV2Response{})
  end

  @doc """
  Cancel a goalv2

  ## Parameters

  - connection (GoogleApi.FitnessInternal.V0DOGFOOD.Connection): Connection to server
  - user_id (String): 
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String): Data format for the response.
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    - :user_ip (String): IP address of the site where the request originates. Use this if you want to enforce per-user limits.
    - :cancel_time_nanos (String): New effective end time of the goal, defaults to now if unset.
    - :header/accept_language (String): The accept-language field from the header of incoming requests.
    - :header/user_agent (String): 
    - :body (GoalV2): 

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec fitness_internal_users_goalsv2_update_cancel(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def fitness_internal_users_goalsv2_update_cancel(connection, user_id, opts \\ []) do
    optional_params = %{
      :"alt" => :query,
      :"fields" => :query,
      :"key" => :query,
      :"oauth_token" => :query,
      :"prettyPrint" => :query,
      :"quotaUser" => :query,
      :"userIp" => :query,
      :"cancelTimeNanos" => :query,
      :"header.acceptLanguage" => :query,
      :"header.userAgent" => :query,
      :"body" => :body
    }
    %{}
    |> method(:put)
    |> url("/users/#{user_id}/goalsv2/cancel")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Cancel a goalv2 and create another goalv2

  ## Parameters

  - connection (GoogleApi.FitnessInternal.V0DOGFOOD.Connection): Connection to server
  - user_id (String): 
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String): Data format for the response.
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    - :user_ip (String): IP address of the site where the request originates. Use this if you want to enforce per-user limits.
    - :body (UpdateGoalV2Request): 

  ## Returns

  {:ok, %GoogleApi.FitnessInternal.V0DOGFOOD.Model.GoalV2{}} on success
  {:error, info} on failure
  """
  @spec fitness_internal_users_goalsv2_update_cancel_create(Tesla.Env.client, String.t, keyword()) :: {:ok, GoogleApi.FitnessInternal.V0DOGFOOD.Model.GoalV2.t} | {:error, Tesla.Env.t}
  def fitness_internal_users_goalsv2_update_cancel_create(connection, user_id, opts \\ []) do
    optional_params = %{
      :"alt" => :query,
      :"fields" => :query,
      :"key" => :query,
      :"oauth_token" => :query,
      :"prettyPrint" => :query,
      :"quotaUser" => :query,
      :"userIp" => :query,
      :"body" => :body
    }
    %{}
    |> method(:put)
    |> url("/users/#{user_id}/goalsv2/cancelCreate")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.FitnessInternal.V0DOGFOOD.Model.GoalV2{})
  end

  @doc """
  Posts a comment to a group.

  ## Parameters

  - connection (GoogleApi.FitnessInternal.V0DOGFOOD.Connection): Connection to server
  - user_id (String): 
  - group_id (String): @required
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String): Data format for the response.
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    - :user_ip (String): IP address of the site where the request originates. Use this if you want to enforce per-user limits.
    - :body (CreateGroupCommentRequest): 

  ## Returns

  {:ok, %GoogleApi.FitnessInternal.V0DOGFOOD.Model.Comment{}} on success
  {:error, info} on failure
  """
  @spec fitness_internal_users_groups_comments_create(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, GoogleApi.FitnessInternal.V0DOGFOOD.Model.Comment.t} | {:error, Tesla.Env.t}
  def fitness_internal_users_groups_comments_create(connection, user_id, group_id, opts \\ []) do
    optional_params = %{
      :"alt" => :query,
      :"fields" => :query,
      :"key" => :query,
      :"oauth_token" => :query,
      :"prettyPrint" => :query,
      :"quotaUser" => :query,
      :"userIp" => :query,
      :"body" => :body
    }
    %{}
    |> method(:post)
    |> url("/users/#{user_id}/groups/#{group_id}/comments")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.FitnessInternal.V0DOGFOOD.Model.Comment{})
  end

  @doc """
  Deletes a comment from a group.

  ## Parameters

  - connection (GoogleApi.FitnessInternal.V0DOGFOOD.Connection): Connection to server
  - user_id (String): 
  - group_id (String): @required
  - comment_id (String): @required
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String): Data format for the response.
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    - :user_ip (String): IP address of the site where the request originates. Use this if you want to enforce per-user limits.
    - :header/accept_language (String): The accept-language field from the header of incoming requests.
    - :header/user_agent (String): 

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec fitness_internal_users_groups_comments_delete(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def fitness_internal_users_groups_comments_delete(connection, user_id, group_id, comment_id, opts \\ []) do
    optional_params = %{
      :"alt" => :query,
      :"fields" => :query,
      :"key" => :query,
      :"oauth_token" => :query,
      :"prettyPrint" => :query,
      :"quotaUser" => :query,
      :"userIp" => :query,
      :"header.acceptLanguage" => :query,
      :"header.userAgent" => :query
    }
    %{}
    |> method(:delete)
    |> url("/users/#{user_id}/groups/#{group_id}/comments/#{comment_id}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Lists comments from a group.

  ## Parameters

  - connection (GoogleApi.FitnessInternal.V0DOGFOOD.Connection): Connection to server
  - user_id (String): 
  - group_id (String): @required
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String): Data format for the response.
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    - :user_ip (String): IP address of the site where the request originates. Use this if you want to enforce per-user limits.
    - :header/accept_language (String): The accept-language field from the header of incoming requests.
    - :header/user_agent (String): 
    - :limit (Integer): 
    - :sync_token (String): If not present, returns comments starting from group creation time.

  ## Returns

  {:ok, %GoogleApi.FitnessInternal.V0DOGFOOD.Model.ListGroupCommentsResponse{}} on success
  {:error, info} on failure
  """
  @spec fitness_internal_users_groups_comments_list(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, GoogleApi.FitnessInternal.V0DOGFOOD.Model.ListGroupCommentsResponse.t} | {:error, Tesla.Env.t}
  def fitness_internal_users_groups_comments_list(connection, user_id, group_id, opts \\ []) do
    optional_params = %{
      :"alt" => :query,
      :"fields" => :query,
      :"key" => :query,
      :"oauth_token" => :query,
      :"prettyPrint" => :query,
      :"quotaUser" => :query,
      :"userIp" => :query,
      :"header.acceptLanguage" => :query,
      :"header.userAgent" => :query,
      :"limit" => :query,
      :"syncToken" => :query
    }
    %{}
    |> method(:get)
    |> url("/users/#{user_id}/groups/#{group_id}/comments")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.FitnessInternal.V0DOGFOOD.Model.ListGroupCommentsResponse{})
  end

  @doc """
  Sync comments diffs from a group.

  ## Parameters

  - connection (GoogleApi.FitnessInternal.V0DOGFOOD.Connection): Connection to server
  - user_id (String): 
  - group_id (String): @required
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String): Data format for the response.
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    - :user_ip (String): IP address of the site where the request originates. Use this if you want to enforce per-user limits.
    - :continuation_token (String): If the token is not set, will return changes happened within the last two weeks.
    - :header/accept_language (String): The accept-language field from the header of incoming requests.
    - :header/user_agent (String): 

  ## Returns

  {:ok, %GoogleApi.FitnessInternal.V0DOGFOOD.Model.SyncGroupCommentsResponse{}} on success
  {:error, info} on failure
  """
  @spec fitness_internal_users_groups_comments_sync(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, GoogleApi.FitnessInternal.V0DOGFOOD.Model.SyncGroupCommentsResponse.t} | {:error, Tesla.Env.t}
  def fitness_internal_users_groups_comments_sync(connection, user_id, group_id, opts \\ []) do
    optional_params = %{
      :"alt" => :query,
      :"fields" => :query,
      :"key" => :query,
      :"oauth_token" => :query,
      :"prettyPrint" => :query,
      :"quotaUser" => :query,
      :"userIp" => :query,
      :"continuationToken" => :query,
      :"header.acceptLanguage" => :query,
      :"header.userAgent" => :query
    }
    %{}
    |> method(:get)
    |> url("/users/#{user_id}/groups/#{group_id}/comments/sync")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.FitnessInternal.V0DOGFOOD.Model.SyncGroupCommentsResponse{})
  end

  @doc """
  Create a group

  ## Parameters

  - connection (GoogleApi.FitnessInternal.V0DOGFOOD.Connection): Connection to server
  - user_id (String): 
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String): Data format for the response.
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    - :user_ip (String): IP address of the site where the request originates. Use this if you want to enforce per-user limits.
    - :body (CreateGroupRequest): 

  ## Returns

  {:ok, %GoogleApi.FitnessInternal.V0DOGFOOD.Model.Group{}} on success
  {:error, info} on failure
  """
  @spec fitness_internal_users_groups_create(Tesla.Env.client, String.t, keyword()) :: {:ok, GoogleApi.FitnessInternal.V0DOGFOOD.Model.Group.t} | {:error, Tesla.Env.t}
  def fitness_internal_users_groups_create(connection, user_id, opts \\ []) do
    optional_params = %{
      :"alt" => :query,
      :"fields" => :query,
      :"key" => :query,
      :"oauth_token" => :query,
      :"prettyPrint" => :query,
      :"quotaUser" => :query,
      :"userIp" => :query,
      :"body" => :body
    }
    %{}
    |> method(:post)
    |> url("/users/#{user_id}/groups")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.FitnessInternal.V0DOGFOOD.Model.Group{})
  end

  @doc """
  Fetch a group

  ## Parameters

  - connection (GoogleApi.FitnessInternal.V0DOGFOOD.Connection): Connection to server
  - user_id (String): 
  - group_id (String): 
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String): Data format for the response.
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    - :user_ip (String): IP address of the site where the request originates. Use this if you want to enforce per-user limits.
    - :header/accept_language (String): The accept-language field from the header of incoming requests.
    - :header/user_agent (String): 

  ## Returns

  {:ok, %GoogleApi.FitnessInternal.V0DOGFOOD.Model.Group{}} on success
  {:error, info} on failure
  """
  @spec fitness_internal_users_groups_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, GoogleApi.FitnessInternal.V0DOGFOOD.Model.Group.t} | {:error, Tesla.Env.t}
  def fitness_internal_users_groups_get(connection, user_id, group_id, opts \\ []) do
    optional_params = %{
      :"alt" => :query,
      :"fields" => :query,
      :"key" => :query,
      :"oauth_token" => :query,
      :"prettyPrint" => :query,
      :"quotaUser" => :query,
      :"userIp" => :query,
      :"header.acceptLanguage" => :query,
      :"header.userAgent" => :query
    }
    %{}
    |> method(:get)
    |> url("/users/#{user_id}/groups/#{group_id}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.FitnessInternal.V0DOGFOOD.Model.Group{})
  end

  @doc """
  Fetch all groups a user is a member/owner/invitee of

  ## Parameters

  - connection (GoogleApi.FitnessInternal.V0DOGFOOD.Connection): Connection to server
  - user_id (String): 
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String): Data format for the response.
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    - :user_ip (String): IP address of the site where the request originates. Use this if you want to enforce per-user limits.
    - :header/accept_language (String): The accept-language field from the header of incoming requests.
    - :header/user_agent (String): 
    - :num_progress_periods (Integer): Number of recurring progress periods of the challenge&#39;s goal unit to return. 0 returns nothing, 1 returns current goal progress.
    - :role (List[String]): 

  ## Returns

  {:ok, %GoogleApi.FitnessInternal.V0DOGFOOD.Model.ListGroupsResponse{}} on success
  {:error, info} on failure
  """
  @spec fitness_internal_users_groups_list(Tesla.Env.client, String.t, keyword()) :: {:ok, GoogleApi.FitnessInternal.V0DOGFOOD.Model.ListGroupsResponse.t} | {:error, Tesla.Env.t}
  def fitness_internal_users_groups_list(connection, user_id, opts \\ []) do
    optional_params = %{
      :"alt" => :query,
      :"fields" => :query,
      :"key" => :query,
      :"oauth_token" => :query,
      :"prettyPrint" => :query,
      :"quotaUser" => :query,
      :"userIp" => :query,
      :"header.acceptLanguage" => :query,
      :"header.userAgent" => :query,
      :"numProgressPeriods" => :query,
      :"role" => :query
    }
    %{}
    |> method(:get)
    |> url("/users/#{user_id}/groups")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.FitnessInternal.V0DOGFOOD.Model.ListGroupsResponse{})
  end

  @doc """
  Updates a group

  ## Parameters

  - connection (GoogleApi.FitnessInternal.V0DOGFOOD.Connection): Connection to server
  - user_id (String): 
  - group_id (String): 
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String): Data format for the response.
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    - :user_ip (String): IP address of the site where the request originates. Use this if you want to enforce per-user limits.
    - :body (UpdateGroupRequest): 

  ## Returns

  {:ok, %GoogleApi.FitnessInternal.V0DOGFOOD.Model.Group{}} on success
  {:error, info} on failure
  """
  @spec fitness_internal_users_groups_update(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, GoogleApi.FitnessInternal.V0DOGFOOD.Model.Group.t} | {:error, Tesla.Env.t}
  def fitness_internal_users_groups_update(connection, user_id, group_id, opts \\ []) do
    optional_params = %{
      :"alt" => :query,
      :"fields" => :query,
      :"key" => :query,
      :"oauth_token" => :query,
      :"prettyPrint" => :query,
      :"quotaUser" => :query,
      :"userIp" => :query,
      :"body" => :body
    }
    %{}
    |> method(:put)
    |> url("/users/#{user_id}/groups/#{group_id}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.FitnessInternal.V0DOGFOOD.Model.Group{})
  end

  @doc """
  Accept a group invitation

  ## Parameters

  - connection (GoogleApi.FitnessInternal.V0DOGFOOD.Connection): Connection to server
  - user_id (String): 
  - group_id (String): 
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String): Data format for the response.
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    - :user_ip (String): IP address of the site where the request originates. Use this if you want to enforce per-user limits.
    - :header/accept_language (String): The accept-language field from the header of incoming requests.
    - :header/user_agent (String): 
    - :invite_token (String): 

  ## Returns

  {:ok, %GoogleApi.FitnessInternal.V0DOGFOOD.Model.Group{}} on success
  {:error, info} on failure
  """
  @spec fitness_internal_users_groups_update_accept_invitation(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, GoogleApi.FitnessInternal.V0DOGFOOD.Model.Group.t} | {:error, Tesla.Env.t}
  def fitness_internal_users_groups_update_accept_invitation(connection, user_id, group_id, opts \\ []) do
    optional_params = %{
      :"alt" => :query,
      :"fields" => :query,
      :"key" => :query,
      :"oauth_token" => :query,
      :"prettyPrint" => :query,
      :"quotaUser" => :query,
      :"userIp" => :query,
      :"header.acceptLanguage" => :query,
      :"header.userAgent" => :query,
      :"inviteToken" => :query
    }
    %{}
    |> method(:put)
    |> url("/users/#{user_id}/groups/#{group_id}/acceptInvitation")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.FitnessInternal.V0DOGFOOD.Model.Group{})
  end

  @doc """
  Decline group rejoin invitations

  ## Parameters

  - connection (GoogleApi.FitnessInternal.V0DOGFOOD.Connection): Connection to server
  - user_id (String): 
  - group_id (String): 
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String): Data format for the response.
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    - :user_ip (String): IP address of the site where the request originates. Use this if you want to enforce per-user limits.

  ## Returns

  {:ok, %GoogleApi.FitnessInternal.V0DOGFOOD.Model.Group{}} on success
  {:error, info} on failure
  """
  @spec fitness_internal_users_groups_update_decline_rejoin_invitation(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, GoogleApi.FitnessInternal.V0DOGFOOD.Model.Group.t} | {:error, Tesla.Env.t}
  def fitness_internal_users_groups_update_decline_rejoin_invitation(connection, user_id, group_id, opts \\ []) do
    optional_params = %{
      :"alt" => :query,
      :"fields" => :query,
      :"key" => :query,
      :"oauth_token" => :query,
      :"prettyPrint" => :query,
      :"quotaUser" => :query,
      :"userIp" => :query
    }
    %{}
    |> method(:put)
    |> url("/users/#{user_id}/groups/#{group_id}/declineRejoinInvitation")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.FitnessInternal.V0DOGFOOD.Model.Group{})
  end

  @doc """
  Leave a group

  ## Parameters

  - connection (GoogleApi.FitnessInternal.V0DOGFOOD.Connection): Connection to server
  - user_id (String): 
  - group_id (String): 
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String): Data format for the response.
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    - :user_ip (String): IP address of the site where the request originates. Use this if you want to enforce per-user limits.
    - :header/accept_language (String): The accept-language field from the header of incoming requests.
    - :header/user_agent (String): 

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec fitness_internal_users_groups_update_leave(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def fitness_internal_users_groups_update_leave(connection, user_id, group_id, opts \\ []) do
    optional_params = %{
      :"alt" => :query,
      :"fields" => :query,
      :"key" => :query,
      :"oauth_token" => :query,
      :"prettyPrint" => :query,
      :"quotaUser" => :query,
      :"userIp" => :query,
      :"header.acceptLanguage" => :query,
      :"header.userAgent" => :query
    }
    %{}
    |> method(:put)
    |> url("/users/#{user_id}/groups/#{group_id}/leave")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Reject group invitations

  ## Parameters

  - connection (GoogleApi.FitnessInternal.V0DOGFOOD.Connection): Connection to server
  - user_id (String): 
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String): Data format for the response.
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    - :user_ip (String): IP address of the site where the request originates. Use this if you want to enforce per-user limits.
    - :body (RejectInvitationsRequest): 

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec fitness_internal_users_groups_update_reject_invitations(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def fitness_internal_users_groups_update_reject_invitations(connection, user_id, opts \\ []) do
    optional_params = %{
      :"alt" => :query,
      :"fields" => :query,
      :"key" => :query,
      :"oauth_token" => :query,
      :"prettyPrint" => :query,
      :"quotaUser" => :query,
      :"userIp" => :query,
      :"body" => :body
    }
    %{}
    |> method(:put)
    |> url("/users/#{user_id}/groups/rejectInvitations")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """

  ## Parameters

  - connection (GoogleApi.FitnessInternal.V0DOGFOOD.Connection): Connection to server
  - user_id (String): 
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String): Data format for the response.
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    - :user_ip (String): IP address of the site where the request originates. Use this if you want to enforce per-user limits.
    - :header/accept_language (String): The accept-language field from the header of incoming requests.
    - :header/user_agent (String): 
    - :body (Notification): 

  ## Returns

  {:ok, %GoogleApi.FitnessInternal.V0DOGFOOD.Model.Notification{}} on success
  {:error, info} on failure
  """
  @spec fitness_internal_users_notifications_create(Tesla.Env.client, String.t, keyword()) :: {:ok, GoogleApi.FitnessInternal.V0DOGFOOD.Model.Notification.t} | {:error, Tesla.Env.t}
  def fitness_internal_users_notifications_create(connection, user_id, opts \\ []) do
    optional_params = %{
      :"alt" => :query,
      :"fields" => :query,
      :"key" => :query,
      :"oauth_token" => :query,
      :"prettyPrint" => :query,
      :"quotaUser" => :query,
      :"userIp" => :query,
      :"header.acceptLanguage" => :query,
      :"header.userAgent" => :query,
      :"body" => :body
    }
    %{}
    |> method(:post)
    |> url("/users/#{user_id}/notifications")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.FitnessInternal.V0DOGFOOD.Model.Notification{})
  end

  @doc """

  ## Parameters

  - connection (GoogleApi.FitnessInternal.V0DOGFOOD.Connection): Connection to server
  - user_id (String): 
  - notification_id (String): 
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String): Data format for the response.
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    - :user_ip (String): IP address of the site where the request originates. Use this if you want to enforce per-user limits.
    - :header/accept_language (String): The accept-language field from the header of incoming requests.
    - :header/user_agent (String): 

  ## Returns

  {:ok, %GoogleApi.FitnessInternal.V0DOGFOOD.Model.NotificationStatus{}} on success
  {:error, info} on failure
  """
  @spec fitness_internal_users_notifications_get_status(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, GoogleApi.FitnessInternal.V0DOGFOOD.Model.NotificationStatus.t} | {:error, Tesla.Env.t}
  def fitness_internal_users_notifications_get_status(connection, user_id, notification_id, opts \\ []) do
    optional_params = %{
      :"alt" => :query,
      :"fields" => :query,
      :"key" => :query,
      :"oauth_token" => :query,
      :"prettyPrint" => :query,
      :"quotaUser" => :query,
      :"userIp" => :query,
      :"header.acceptLanguage" => :query,
      :"header.userAgent" => :query
    }
    %{}
    |> method(:get)
    |> url("/users/#{user_id}/notifications/#{notification_id}/status")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.FitnessInternal.V0DOGFOOD.Model.NotificationStatus{})
  end

  @doc """
  Returns all notifications for a user. If the &#39;status&#39; parameter is set, only the notifications with a matching status will be returned.

  ## Parameters

  - connection (GoogleApi.FitnessInternal.V0DOGFOOD.Connection): Connection to server
  - user_id (String): 
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String): Data format for the response.
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    - :user_ip (String): IP address of the site where the request originates. Use this if you want to enforce per-user limits.
    - :force_generate_source_names (List[String]): 
    - :header/accept_language (String): The accept-language field from the header of incoming requests.
    - :header/user_agent (String): 
    - :include_stored_notifications (Boolean): if set, also returns all notifications that have been acted upon by user
    - :locale (String): TODO(ricebin): deprecate; use header.accept_language
    - :status (String): 

  ## Returns

  {:ok, %GoogleApi.FitnessInternal.V0DOGFOOD.Model.ListNotificationsResponse{}} on success
  {:error, info} on failure
  """
  @spec fitness_internal_users_notifications_list(Tesla.Env.client, String.t, keyword()) :: {:ok, GoogleApi.FitnessInternal.V0DOGFOOD.Model.ListNotificationsResponse.t} | {:error, Tesla.Env.t}
  def fitness_internal_users_notifications_list(connection, user_id, opts \\ []) do
    optional_params = %{
      :"alt" => :query,
      :"fields" => :query,
      :"key" => :query,
      :"oauth_token" => :query,
      :"prettyPrint" => :query,
      :"quotaUser" => :query,
      :"userIp" => :query,
      :"forceGenerateSourceNames" => :query,
      :"header.acceptLanguage" => :query,
      :"header.userAgent" => :query,
      :"includeStoredNotifications" => :query,
      :"locale" => :query,
      :"status" => :query
    }
    %{}
    |> method(:get)
    |> url("/users/#{user_id}/notifications")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.FitnessInternal.V0DOGFOOD.Model.ListNotificationsResponse{})
  end

  @doc """

  ## Parameters

  - connection (GoogleApi.FitnessInternal.V0DOGFOOD.Connection): Connection to server
  - user_id (String): 
  - notification_id (String): 
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String): Data format for the response.
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    - :user_ip (String): IP address of the site where the request originates. Use this if you want to enforce per-user limits.
    - :header/accept_language (String): The accept-language field from the header of incoming requests.
    - :header/user_agent (String): 
    - :body (Notification): 

  ## Returns

  {:ok, %GoogleApi.FitnessInternal.V0DOGFOOD.Model.Notification{}} on success
  {:error, info} on failure
  """
  @spec fitness_internal_users_notifications_update(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, GoogleApi.FitnessInternal.V0DOGFOOD.Model.Notification.t} | {:error, Tesla.Env.t}
  def fitness_internal_users_notifications_update(connection, user_id, notification_id, opts \\ []) do
    optional_params = %{
      :"alt" => :query,
      :"fields" => :query,
      :"key" => :query,
      :"oauth_token" => :query,
      :"prettyPrint" => :query,
      :"quotaUser" => :query,
      :"userIp" => :query,
      :"header.acceptLanguage" => :query,
      :"header.userAgent" => :query,
      :"body" => :body
    }
    %{}
    |> method(:put)
    |> url("/users/#{user_id}/notifications/#{notification_id}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.FitnessInternal.V0DOGFOOD.Model.Notification{})
  end

  @doc """

  ## Parameters

  - connection (GoogleApi.FitnessInternal.V0DOGFOOD.Connection): Connection to server
  - user_id (String): 
  - notification_id (String): 
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String): Data format for the response.
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    - :user_ip (String): IP address of the site where the request originates. Use this if you want to enforce per-user limits.
    - :header/accept_language (String): The accept-language field from the header of incoming requests.
    - :header/user_agent (String): 
    - :body (NotificationStatus): 

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec fitness_internal_users_notifications_update_record_user_action(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def fitness_internal_users_notifications_update_record_user_action(connection, user_id, notification_id, opts \\ []) do
    optional_params = %{
      :"alt" => :query,
      :"fields" => :query,
      :"key" => :query,
      :"oauth_token" => :query,
      :"prettyPrint" => :query,
      :"quotaUser" => :query,
      :"userIp" => :query,
      :"header.acceptLanguage" => :query,
      :"header.userAgent" => :query,
      :"body" => :body
    }
    %{}
    |> method(:put)
    |> url("/users/#{user_id}/notifications/#{notification_id}/recordUserAction")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Called by Comaneci and newer clients.

  ## Parameters

  - connection (GoogleApi.FitnessInternal.V0DOGFOOD.Connection): Connection to server
  - user_id (String): 
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String): Data format for the response.
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    - :user_ip (String): IP address of the site where the request originates. Use this if you want to enforce per-user limits.
    - :force_generate_source_names (List[String]): 
    - :header/accept_language (String): The accept-language field from the header of incoming requests.
    - :header/user_agent (String): 
    - :include_stored_notifications (Boolean): if set, also returns all notifications that have been acted upon by user
    - :locale (String): TODO(ricebin): deprecate; use header.accept_language
    - :status (String): 

  ## Returns

  {:ok, %GoogleApi.FitnessInternal.V0DOGFOOD.Model.ListNotificationsResponse{}} on success
  {:error, info} on failure
  """
  @spec fitness_internal_users_notifications_v2_list(Tesla.Env.client, String.t, keyword()) :: {:ok, GoogleApi.FitnessInternal.V0DOGFOOD.Model.ListNotificationsResponse.t} | {:error, Tesla.Env.t}
  def fitness_internal_users_notifications_v2_list(connection, user_id, opts \\ []) do
    optional_params = %{
      :"alt" => :query,
      :"fields" => :query,
      :"key" => :query,
      :"oauth_token" => :query,
      :"prettyPrint" => :query,
      :"quotaUser" => :query,
      :"userIp" => :query,
      :"forceGenerateSourceNames" => :query,
      :"header.acceptLanguage" => :query,
      :"header.userAgent" => :query,
      :"includeStoredNotifications" => :query,
      :"locale" => :query,
      :"status" => :query
    }
    %{}
    |> method(:get)
    |> url("/users/#{user_id}/notifications_v2")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.FitnessInternal.V0DOGFOOD.Model.ListNotificationsResponse{})
  end

  @doc """

  ## Parameters

  - connection (GoogleApi.FitnessInternal.V0DOGFOOD.Connection): Connection to server
  - user_id (String): 
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String): Data format for the response.
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    - :user_ip (String): IP address of the site where the request originates. Use this if you want to enforce per-user limits.
    - :annotation_data_stream_id (List[String]): 
    - :annotation_data_type (List[String]): see NonBucketingSessionAnnotator or BucketingSessionAnnotator for supported DataTypes com.google.step_count.delta com.google.calories.expended com.google.distance.delta com.google.heart_rate.bpm
    - :deprecated_include_post_filler_sessions (Boolean): 
    - :deprecated_include_pre_filler_sessions (Boolean): DEPRECATED, will always default to true.
    - :end_time_millis (String): @required
    - :header/accept_language (String): The accept-language field from the header of incoming requests.
    - :header/user_agent (String): 
    - :language_code (String): TODO(ricebin): deprecate; use header.accept_language
    - :start_time_millis (String): @required

  ## Returns

  {:ok, %GoogleApi.FitnessInternal.V0DOGFOOD.Model.ListSessionsResponse{}} on success
  {:error, info} on failure
  """
  @spec fitness_internal_users_sessions_list(Tesla.Env.client, String.t, keyword()) :: {:ok, GoogleApi.FitnessInternal.V0DOGFOOD.Model.ListSessionsResponse.t} | {:error, Tesla.Env.t}
  def fitness_internal_users_sessions_list(connection, user_id, opts \\ []) do
    optional_params = %{
      :"alt" => :query,
      :"fields" => :query,
      :"key" => :query,
      :"oauth_token" => :query,
      :"prettyPrint" => :query,
      :"quotaUser" => :query,
      :"userIp" => :query,
      :"annotationDataStreamId" => :query,
      :"annotationDataType" => :query,
      :"deprecatedIncludePostFillerSessions" => :query,
      :"deprecatedIncludePreFillerSessions" => :query,
      :"endTimeMillis" => :query,
      :"header.acceptLanguage" => :query,
      :"header.userAgent" => :query,
      :"languageCode" => :query,
      :"startTimeMillis" => :query
    }
    %{}
    |> method(:get)
    |> url("/users/#{user_id}/sessions")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.FitnessInternal.V0DOGFOOD.Model.ListSessionsResponse{})
  end

  @doc """
  Deletes sessions (both Glycogen and Ferrite) and segments and inserts new.

  ## Parameters

  - connection (GoogleApi.FitnessInternal.V0DOGFOOD.Connection): Connection to server
  - user_id (String): 
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String): Data format for the response.
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    - :user_ip (String): IP address of the site where the request originates. Use this if you want to enforce per-user limits.
    - :end_time_millis (String): @required
    - :header/accept_language (String): The accept-language field from the header of incoming requests.
    - :header/user_agent (String): 
    - :hide (Boolean): 
    - :start_time_millis (String): @required
    - :body (TimelineSession): 

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec fitness_internal_users_sessions_update_edit(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def fitness_internal_users_sessions_update_edit(connection, user_id, opts \\ []) do
    optional_params = %{
      :"alt" => :query,
      :"fields" => :query,
      :"key" => :query,
      :"oauth_token" => :query,
      :"prettyPrint" => :query,
      :"quotaUser" => :query,
      :"userIp" => :query,
      :"endTimeMillis" => :query,
      :"header.acceptLanguage" => :query,
      :"header.userAgent" => :query,
      :"hide" => :query,
      :"startTimeMillis" => :query,
      :"body" => :body
    }
    %{}
    |> method(:put)
    |> url("/users/#{user_id}/sessions/edit")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Permits for a given snapshot of session data associated with a given platform session to be accessed by holders of a returned secret token.

  ## Parameters

  - connection (GoogleApi.FitnessInternal.V0DOGFOOD.Connection): Connection to server
  - user_id (String): 
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String): Data format for the response.
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    - :user_ip (String): IP address of the site where the request originates. Use this if you want to enforce per-user limits.
    - :body (CreateSharedSessionRequest): 

  ## Returns

  {:ok, %GoogleApi.FitnessInternal.V0DOGFOOD.Model.SharedSession{}} on success
  {:error, info} on failure
  """
  @spec fitness_internal_users_shared_sessions_create(Tesla.Env.client, String.t, keyword()) :: {:ok, GoogleApi.FitnessInternal.V0DOGFOOD.Model.SharedSession.t} | {:error, Tesla.Env.t}
  def fitness_internal_users_shared_sessions_create(connection, user_id, opts \\ []) do
    optional_params = %{
      :"alt" => :query,
      :"fields" => :query,
      :"key" => :query,
      :"oauth_token" => :query,
      :"prettyPrint" => :query,
      :"quotaUser" => :query,
      :"userIp" => :query,
      :"body" => :body
    }
    %{}
    |> method(:post)
    |> url("/users/#{user_id}/sharedSessions")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.FitnessInternal.V0DOGFOOD.Model.SharedSession{})
  end

  @doc """
  Removes the ability for a previously shared session to be accessed by anyone, including the original owner of the data. This will remove the SharedSession object from Stratus but leave the platform session object in the platform, un-touched.

  ## Parameters

  - connection (GoogleApi.FitnessInternal.V0DOGFOOD.Connection): Connection to server
  - user_id (String): 
  - session_id (String): The id
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String): Data format for the response.
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    - :user_ip (String): IP address of the site where the request originates. Use this if you want to enforce per-user limits.
    - :header/accept_language (String): The accept-language field from the header of incoming requests.
    - :header/user_agent (String): 

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec fitness_internal_users_shared_sessions_delete(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def fitness_internal_users_shared_sessions_delete(connection, user_id, session_id, opts \\ []) do
    optional_params = %{
      :"alt" => :query,
      :"fields" => :query,
      :"key" => :query,
      :"oauth_token" => :query,
      :"prettyPrint" => :query,
      :"quotaUser" => :query,
      :"userIp" => :query,
      :"header.acceptLanguage" => :query,
      :"header.userAgent" => :query
    }
    %{}
    |> method(:delete)
    |> url("/users/#{user_id}/sharedSessions/#{session_id}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Retrieves the shared session from stratus. Should only be called if the session is not yet saved in glycogen.

  ## Parameters

  - connection (GoogleApi.FitnessInternal.V0DOGFOOD.Connection): Connection to server
  - user_id (String): 
  - session_id (String): The id
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String): Data format for the response.
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    - :user_ip (String): IP address of the site where the request originates. Use this if you want to enforce per-user limits.
    - :header/accept_language (String): The accept-language field from the header of incoming requests.
    - :header/user_agent (String): 

  ## Returns

  {:ok, %GoogleApi.FitnessInternal.V0DOGFOOD.Model.SharedSession{}} on success
  {:error, info} on failure
  """
  @spec fitness_internal_users_shared_sessions_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, GoogleApi.FitnessInternal.V0DOGFOOD.Model.SharedSession.t} | {:error, Tesla.Env.t}
  def fitness_internal_users_shared_sessions_get(connection, user_id, session_id, opts \\ []) do
    optional_params = %{
      :"alt" => :query,
      :"fields" => :query,
      :"key" => :query,
      :"oauth_token" => :query,
      :"prettyPrint" => :query,
      :"quotaUser" => :query,
      :"userIp" => :query,
      :"header.acceptLanguage" => :query,
      :"header.userAgent" => :query
    }
    %{}
    |> method(:get)
    |> url("/users/#{user_id}/sharedSessions/#{session_id}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.FitnessInternal.V0DOGFOOD.Model.SharedSession{})
  end

  @doc """

  ## Parameters

  - connection (GoogleApi.FitnessInternal.V0DOGFOOD.Connection): Connection to server
  - user_id (String): 
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String): Data format for the response.
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    - :user_ip (String): IP address of the site where the request originates. Use this if you want to enforce per-user limits.
    - :also_delete_platform_data (Boolean): 
    - :end_time_millis (String): 
    - :header/accept_language (String): The accept-language field from the header of incoming requests.
    - :header/user_agent (String): 
    - :start_time_millis (String): 

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec fitness_internal_users_update_delete_history(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def fitness_internal_users_update_delete_history(connection, user_id, opts \\ []) do
    optional_params = %{
      :"alt" => :query,
      :"fields" => :query,
      :"key" => :query,
      :"oauth_token" => :query,
      :"prettyPrint" => :query,
      :"quotaUser" => :query,
      :"userIp" => :query,
      :"alsoDeletePlatformData" => :query,
      :"endTimeMillis" => :query,
      :"header.acceptLanguage" => :query,
      :"header.userAgent" => :query,
      :"startTimeMillis" => :query
    }
    %{}
    |> method(:put)
    |> url("/users/#{user_id}/deleteHistory")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """

  ## Parameters

  - connection (GoogleApi.FitnessInternal.V0DOGFOOD.Connection): Connection to server
  - user_id (String): 
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String): Data format for the response.
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    - :user_ip (String): IP address of the site where the request originates. Use this if you want to enforce per-user limits.
    - :create_default_goal (Boolean): 
    - :header/accept_language (String): The accept-language field from the header of incoming requests.
    - :header/user_agent (String): 
    - :body (Profile): 

  ## Returns

  {:ok, %GoogleApi.FitnessInternal.V0DOGFOOD.Model.Profile{}} on success
  {:error, info} on failure
  """
  @spec fitness_internal_users_update_onboard_new_user(Tesla.Env.client, String.t, keyword()) :: {:ok, GoogleApi.FitnessInternal.V0DOGFOOD.Model.Profile.t} | {:error, Tesla.Env.t}
  def fitness_internal_users_update_onboard_new_user(connection, user_id, opts \\ []) do
    optional_params = %{
      :"alt" => :query,
      :"fields" => :query,
      :"key" => :query,
      :"oauth_token" => :query,
      :"prettyPrint" => :query,
      :"quotaUser" => :query,
      :"userIp" => :query,
      :"createDefaultGoal" => :query,
      :"header.acceptLanguage" => :query,
      :"header.userAgent" => :query,
      :"body" => :body
    }
    %{}
    |> method(:put)
    |> url("/users/#{user_id}/onboardNewUser")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.FitnessInternal.V0DOGFOOD.Model.Profile{})
  end

  @doc """

  ## Parameters

  - connection (GoogleApi.FitnessInternal.V0DOGFOOD.Connection): Connection to server
  - user_id (String): 
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String): Data format for the response.
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    - :user_ip (String): IP address of the site where the request originates. Use this if you want to enforce per-user limits.
    - :header/accept_language (String): The accept-language field from the header of incoming requests.
    - :header/user_agent (String): 
    - :body (Profile): 

  ## Returns

  {:ok, %GoogleApi.FitnessInternal.V0DOGFOOD.Model.Profile{}} on success
  {:error, info} on failure
  """
  @spec fitness_internal_users_update_profile(Tesla.Env.client, String.t, keyword()) :: {:ok, GoogleApi.FitnessInternal.V0DOGFOOD.Model.Profile.t} | {:error, Tesla.Env.t}
  def fitness_internal_users_update_profile(connection, user_id, opts \\ []) do
    optional_params = %{
      :"alt" => :query,
      :"fields" => :query,
      :"key" => :query,
      :"oauth_token" => :query,
      :"prettyPrint" => :query,
      :"quotaUser" => :query,
      :"userIp" => :query,
      :"header.acceptLanguage" => :query,
      :"header.userAgent" => :query,
      :"body" => :body
    }
    %{}
    |> method(:put)
    |> url("/users/#{user_id}/profile")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.FitnessInternal.V0DOGFOOD.Model.Profile{})
  end
end
