# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule GoogleApi.CloudDebugger.V2.Api.Controller do
  @moduledoc """
  API calls for all endpoints tagged `Controller`.
  """

  alias GoogleApi.CloudDebugger.V2.Connection
  import GoogleApi.CloudDebugger.V2.RequestBuilder


  @doc """
  Returns the list of all active breakpoints for the debuggee.  The breakpoint specification (&#x60;location&#x60;, &#x60;condition&#x60;, and &#x60;expressions&#x60; fields) is semantically immutable, although the field values may change. For example, an agent may update the location line number to reflect the actual line where the breakpoint was set, but this doesn&#39;t change the breakpoint semantics.  This means that an agent does not need to check if a breakpoint has changed when it encounters the same breakpoint on a successive call. Moreover, an agent should remember the breakpoints that are completed until the controller removes them from the active list to avoid setting those breakpoints again.

  ## Parameters

  - connection (GoogleApi.CloudDebugger.V2.Connection): Connection to server
  - debuggee_id (String): Identifies the debuggee.
  - opts (KeywordList): [optional] Optional parameters
    - :pp (Boolean): Pretty-print response.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :bearer_token (String): OAuth bearer token.
    - :upload_protocol (String): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :upload_type (String): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :callback (String): JSONP
    - :__/xgafv (String): V1 error format.
    - :alt (String): Data format for response.
    - :access_token (String): OAuth access token.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :success_on_timeout (Boolean): If set to &#x60;true&#x60; (recommended), returns &#x60;google.rpc.Code.OK&#x60; status and sets the &#x60;wait_expired&#x60; response field to &#x60;true&#x60; when the server-selected timeout has expired.  If set to &#x60;false&#x60; (deprecated), returns &#x60;google.rpc.Code.ABORTED&#x60; status when the server-selected timeout has expired.
    - :wait_token (String): A token that, if specified, blocks the method call until the list of active breakpoints has changed, or a server-selected timeout has expired. The value should be set from the &#x60;next_wait_token&#x60; field in the last response. The initial value should be set to &#x60;\&quot;init\&quot;&#x60;.

  ## Returns

  {:ok, %GoogleApi.CloudDebugger.V2.Model.ListActiveBreakpointsResponse{}} on success
  {:error, info} on failure
  """
  @spec clouddebugger_controller_debuggees_breakpoints_list(Tesla.Env.client, String.t, keyword()) :: {:ok, GoogleApi.CloudDebugger.V2.Model.ListActiveBreakpointsResponse.t} | {:error, Tesla.Env.t}
  def clouddebugger_controller_debuggees_breakpoints_list(connection, debuggee_id, opts \\ []) do
    optional_params = %{
      :"pp" => :query,
      :"oauth_token" => :query,
      :"bearer_token" => :query,
      :"upload_protocol" => :query,
      :"prettyPrint" => :query,
      :"uploadType" => :query,
      :"fields" => :query,
      :"callback" => :query,
      :"$.xgafv" => :query,
      :"alt" => :query,
      :"access_token" => :query,
      :"key" => :query,
      :"quotaUser" => :query,
      :"successOnTimeout" => :query,
      :"waitToken" => :query
    }
    %{}
    |> method(:get)
    |> url("/v2/controller/debuggees/#{debuggee_id}/breakpoints")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.CloudDebugger.V2.Model.ListActiveBreakpointsResponse{})
  end

  @doc """
  Updates the breakpoint state or mutable fields. The entire Breakpoint message must be sent back to the controller service.  Updates to active breakpoint fields are only allowed if the new value does not change the breakpoint specification. Updates to the &#x60;location&#x60;, &#x60;condition&#x60; and &#x60;expressions&#x60; fields should not alter the breakpoint semantics. These may only make changes such as canonicalizing a value or snapping the location to the correct line of code.

  ## Parameters

  - connection (GoogleApi.CloudDebugger.V2.Connection): Connection to server
  - debuggee_id (String): Identifies the debuggee being debugged.
  - id (String): Breakpoint identifier, unique in the scope of the debuggee.
  - opts (KeywordList): [optional] Optional parameters
    - :pp (Boolean): Pretty-print response.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :bearer_token (String): OAuth bearer token.
    - :upload_protocol (String): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :upload_type (String): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :callback (String): JSONP
    - :__/xgafv (String): V1 error format.
    - :alt (String): Data format for response.
    - :access_token (String): OAuth access token.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :body (UpdateActiveBreakpointRequest): 

  ## Returns

  {:ok, %GoogleApi.CloudDebugger.V2.Model.UpdateActiveBreakpointResponse{}} on success
  {:error, info} on failure
  """
  @spec clouddebugger_controller_debuggees_breakpoints_update(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, GoogleApi.CloudDebugger.V2.Model.UpdateActiveBreakpointResponse.t} | {:error, Tesla.Env.t}
  def clouddebugger_controller_debuggees_breakpoints_update(connection, debuggee_id, id, opts \\ []) do
    optional_params = %{
      :"pp" => :query,
      :"oauth_token" => :query,
      :"bearer_token" => :query,
      :"upload_protocol" => :query,
      :"prettyPrint" => :query,
      :"uploadType" => :query,
      :"fields" => :query,
      :"callback" => :query,
      :"$.xgafv" => :query,
      :"alt" => :query,
      :"access_token" => :query,
      :"key" => :query,
      :"quotaUser" => :query,
      :"body" => :body
    }
    %{}
    |> method(:put)
    |> url("/v2/controller/debuggees/#{debuggee_id}/breakpoints/#{id}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.CloudDebugger.V2.Model.UpdateActiveBreakpointResponse{})
  end

  @doc """
  Registers the debuggee with the controller service.  All agents attached to the same application must call this method with exactly the same request content to get back the same stable &#x60;debuggee_id&#x60;. Agents should call this method again whenever &#x60;google.rpc.Code.NOT_FOUND&#x60; is returned from any controller method.  This protocol allows the controller service to disable debuggees, recover from data loss, or change the &#x60;debuggee_id&#x60; format. Agents must handle &#x60;debuggee_id&#x60; value changing upon re-registration.

  ## Parameters

  - connection (GoogleApi.CloudDebugger.V2.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :pp (Boolean): Pretty-print response.
    - :oauth_token (String): OAuth 2.0 token for the current user.
    - :bearer_token (String): OAuth bearer token.
    - :upload_protocol (String): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :pretty_print (Boolean): Returns response with indentations and line breaks.
    - :upload_type (String): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :fields (String): Selector specifying which fields to include in a partial response.
    - :callback (String): JSONP
    - :__/xgafv (String): V1 error format.
    - :alt (String): Data format for response.
    - :access_token (String): OAuth access token.
    - :key (String): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :quota_user (String): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :body (RegisterDebuggeeRequest): 

  ## Returns

  {:ok, %GoogleApi.CloudDebugger.V2.Model.RegisterDebuggeeResponse{}} on success
  {:error, info} on failure
  """
  @spec clouddebugger_controller_debuggees_register(Tesla.Env.client, keyword()) :: {:ok, GoogleApi.CloudDebugger.V2.Model.RegisterDebuggeeResponse.t} | {:error, Tesla.Env.t}
  def clouddebugger_controller_debuggees_register(connection, opts \\ []) do
    optional_params = %{
      :"pp" => :query,
      :"oauth_token" => :query,
      :"bearer_token" => :query,
      :"upload_protocol" => :query,
      :"prettyPrint" => :query,
      :"uploadType" => :query,
      :"fields" => :query,
      :"callback" => :query,
      :"$.xgafv" => :query,
      :"alt" => :query,
      :"access_token" => :query,
      :"key" => :query,
      :"quotaUser" => :query,
      :"body" => :body
    }
    %{}
    |> method(:post)
    |> url("/v2/controller/debuggees/register")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.CloudDebugger.V2.Model.RegisterDebuggeeResponse{})
  end
end
